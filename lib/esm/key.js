import{__awaiter as e,__generator as t}from"./_virtual/_tslib.js";import r from"node-forge";import n from"chalk";import{writeFileContent as i}from"./file.js";import{Encryption as o}from"./types.js";import{getPath as c}from"./utils.js";var getRsa=function(){return new Promise(function(e,t){try{var n=r.pki.rsa.generateKeyPair({bits:2048}),i=r.pki.privateKeyToPem(n.privateKey),o=r.pki.publicKeyToPem(n.publicKey);e({privateKey:i,publicKey:o})}catch(e){t(e)}})},getAes=function(){return r.random.getBytesSync(32)},createRsa=function(){return e(void 0,void 0,void 0,function(){var e,r,s;return t(this,function(t){switch(t.label){case 0:return[4,getRsa()];case 1:return r=(e=t.sent()).privateKey,s=e.publicKey,[4,i(c("".concat(o.RSA,".private")),r)];case 2:return t.sent(),[4,i(c(o.RSA),s)];case 3:return t.sent(),console.log(n.green("RSA Private Key: ".concat(r))),console.log(n.green("RSA Public Key: ".concat(s))),[2,s]}})})},createAes=function(){return e(void 0,void 0,void 0,function(){var e;return t(this,function(t){switch(t.label){case 0:return[4,getAes()];case 1:return e=t.sent(),[4,i(c(o.AES),r.util.bytesToHex(e))];case 2:return t.sent(),console.log(n.green("AES Private Key: ".concat(r.util.bytesToHex(e)))),[2,e]}})})};export{createAes,createRsa,getAes,getRsa};
